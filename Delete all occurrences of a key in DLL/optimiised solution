/**
 * Definition of doubly linked list:
 *
 * class Node {
 * public:
 *      int data;
 *      Node *prev;
 *      Node *next;
 *      Node() {
 *          this->data = 0;
 *          this->prev = NULL;
 *          this->next = NULL;
 *      }
 *      Node(int data) {
 *          this->data = data;
 *          this->prev = NULL;
 *          this->next = NULL;
 *      }
 *      Node (int data, Node *next, Node *prev) {
 *          this->data = data;
 *          this->prev = prev;
 *          this->next = next;
 *      }
 * };
 *
 *************************************************************************/

Node * deleteAllOccurrences(Node* head, int k) {
    // Write your code here
    if(head ==nullptr ) return NULL;
    Node* temp = head ;
    while(temp!=nullptr ) {
        Node* nextNode = temp->next ;
        if(temp->data == k) {
            Node* prevNode = temp->prev;
            if(prevNode)// means previous node exists mean it is not null 
            {
                prevNode->next = nextNode;
            }
            else {
                head = temp->next ;
            }
            if(nextNode)   nextNode->prev = prevNode ;
            delete(temp);
        }
        else {
            temp = temp->next ;
        }
        
    }
    return head ;



}
